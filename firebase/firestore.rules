rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthed() {
      return request.auth != null;
    }
    
    function isOwner(uid) {
      return isAuthed() && request.auth.uid == uid;
    }
    
    function isMember(chatId) {
      return isAuthed() && 
        exists(/databases/$(database)/documents/chats/$(chatId)) &&
        request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.members;
    }

    // Users collection - Anonymous users için tamamen açık
    match /users/{uid} {
      allow read, write: if isAuthed(); // Anonymous users için tüm işlemler
    }

    // Chats collection
    match /chats/{chatId} {
      allow read: if isMember(chatId);
      allow create: if isAuthed() && 
        request.auth.uid in request.resource.data.members &&
        request.resource.data.createdBy == request.auth.uid;
      allow update: if isMember(chatId) && (
        // Only update lastMessage or add/remove members if admin (for groups)
        (resource.data.type == 'direct') ||
        (resource.data.type == 'group' && request.auth.uid in resource.data.get('admins', []))
      );
      allow delete: if false; // Chats can't be deleted
    }

    // Messages subcollection
    match /messages/{chatId}/items/{messageId} {
      allow read: if isMember(chatId);
      allow create: if isMember(chatId) && 
        request.resource.data.from == request.auth.uid &&
        request.resource.data.chatId == chatId;
      allow update: if isMember(chatId) && (
        // Only sender can update their own message or anyone can update read/delivered status
        request.resource.data.from == request.auth.uid ||
        (resource.data.from == request.resource.data.from && 
         onlyUpdating(['readBy', 'deliveredTo']))
      );
      allow delete: if isMember(chatId) && 
        resource.data.from == request.auth.uid;
    }

    // Typing indicators
    match /typing/{chatId}/users/{uid} {
      allow read: if isMember(chatId);
      allow write: if isOwner(uid) && isMember(chatId);
    }

    // User discovery
    match /discovery/{docId} {
      allow read: if isAuthed();
      allow create: if isAuthed() && 
        request.resource.data.userId == request.auth.uid;
      allow update: if isAuthed() && 
        resource.data.userId == request.auth.uid;
      allow delete: if isAuthed() && 
        resource.data.userId == request.auth.uid;
    }

    // Connection requests
    match /connectionRequests/{requestId} {
      allow read: if isAuthed() && (
        resource.data.from == request.auth.uid || 
        resource.data.to == request.auth.uid
      );
      allow create: if isAuthed() && 
        request.resource.data.from == request.auth.uid;
      allow update: if isAuthed() && 
        resource.data.to == request.auth.uid;
      allow delete: if isAuthed() && (
        resource.data.from == request.auth.uid || 
        resource.data.to == request.auth.uid
      );
    }

    // Helper function to check if only specific fields are being updated
    function onlyUpdating(fields) {
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields);
    }
  }
}
